// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Test_APi.model;

#nullable disable

namespace Test_APi.Migrations
{
    [DbContext(typeof(ElectionManagerContext))]
    [Migration("20240129185629_firstMigration")]
    partial class firstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.26");

            modelBuilder.Entity("Test_APi.model.Candidate", b =>
                {
                    b.Property<int>("CandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PartyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Stateid")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VotingSystemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CandidateId");

                    b.HasIndex("PartyId");

                    b.HasIndex("Stateid");

                    b.HasIndex("VotingSystemId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("Test_APi.model.Ec", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Ecs");
                });

            modelBuilder.Entity("Test_APi.model.MPSeat", b =>
                {
                    b.Property<int>("MPSeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Stateid")
                        .HasColumnType("INTEGER");

                    b.HasKey("MPSeatId");

                    b.HasIndex("Stateid");

                    b.ToTable("MPSeats");
                });

            modelBuilder.Entity("Test_APi.model.Party", b =>
                {
                    b.Property<int>("PartyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PartyId");

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("Test_APi.model.State", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("states");
                });

            modelBuilder.Entity("Test_APi.model.Vote", b =>
                {
                    b.Property<int>("VoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CandidateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VoterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VotingSystemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("VoteId");

                    b.HasIndex("CandidateId");

                    b.HasIndex("VoterId");

                    b.HasIndex("VotingSystemId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("Test_APi.model.Voter", b =>
                {
                    b.Property<int>("VoterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Approved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VoterIdNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("VoterId");

                    b.ToTable("Voters");
                });

            modelBuilder.Entity("Test_APi.model.VotingSystem", b =>
                {
                    b.Property<int>("VotingSystemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVotingOpen")
                        .HasColumnType("INTEGER");

                    b.HasKey("VotingSystemId");

                    b.ToTable("VotingSystems");
                });

            modelBuilder.Entity("Test_APi.model.Candidate", b =>
                {
                    b.HasOne("Test_APi.model.Party", "Party")
                        .WithMany("Candidates")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test_APi.model.State", "State")
                        .WithMany()
                        .HasForeignKey("Stateid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test_APi.model.VotingSystem", null)
                        .WithMany("Candidates")
                        .HasForeignKey("VotingSystemId");

                    b.Navigation("Party");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Test_APi.model.MPSeat", b =>
                {
                    b.HasOne("Test_APi.model.State", "State")
                        .WithMany()
                        .HasForeignKey("Stateid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Test_APi.model.Vote", b =>
                {
                    b.HasOne("Test_APi.model.Candidate", "Candidate")
                        .WithMany("Votes")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test_APi.model.Voter", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test_APi.model.VotingSystem", "VotingSystem")
                        .WithMany()
                        .HasForeignKey("VotingSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Voter");

                    b.Navigation("VotingSystem");
                });

            modelBuilder.Entity("Test_APi.model.Candidate", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Test_APi.model.Party", b =>
                {
                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("Test_APi.model.Voter", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Test_APi.model.VotingSystem", b =>
                {
                    b.Navigation("Candidates");
                });
#pragma warning restore 612, 618
        }
    }
}
